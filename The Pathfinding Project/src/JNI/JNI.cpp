#include "JNI.h"

using namespace tpp;

static nlohmann::json mappings;

static jclass get_class(const std::string& path)
{
	static std::unordered_map<std::string, jclass> classMap;

	if (classMap.empty())
	{
		JavaVM* jvm = nullptr;
		env->GetJavaVM(&jvm);
		jvmtiEnv* tienv = nullptr;
		jvm->GetEnv((void**)&tienv, JVMTI_VERSION_1_2);
		jint classCount = 0;
		jclass* classes = nullptr;
		tienv->GetLoadedClasses(&classCount, &classes);
		jclass ClassClass = env->FindClass("java/lang/Class");
		jmethodID getName = env->GetMethodID(ClassClass, "getName", "()Ljava/lang/String;");

		for (int i = 0; i < classCount; ++i)
		{
			jstring name = (jstring)env->CallObjectMethod(classes[i], getName);
			const char* chars = env->GetStringUTFChars(name, nullptr);
			jsize size = env->GetStringUTFLength(name);
			std::string className(chars, size);
			env->ReleaseStringUTFChars(name, chars);
			for (char& character : className)
			{
				if (character == '.') character = '/';
			}
			classMap.insert({ className, classes[i] });
		}
		tienv->Deallocate((unsigned char*)classes);
	}

	jclass foundclass = nullptr;

	if (!classMap.contains(path))
		return nullptr;
	
	foundclass = classMap.at(path);
	return foundclass;
}

jni::result jni::initialize()
{
	JavaVM* jvm{ nullptr };
	const uint8_t data[3714] = {
	0x7B, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F,
	0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x4D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x4D, 0x69, 0x6E, 0x65, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x74, 0x68, 0x65, 0x50, 0x6C, 0x61, 0x79,
	0x65, 0x72, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64,
	0x5F, 0x37, 0x31, 0x34, 0x33, 0x39, 0x5F, 0x67, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A,
	0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F,
	0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x79, 0x2F, 0x45, 0x6E,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x50, 0x3B, 0x22, 0x7D, 0x2C,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x74, 0x68, 0x65, 0x4D, 0x69, 0x6E, 0x65,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69,
	0x65, 0x6C, 0x64, 0x5F, 0x37, 0x31, 0x34, 0x33, 0x32, 0x5F, 0x50, 0x22, 0x2C, 0x22, 0x73, 0x69,
	0x67, 0x22, 0x3A, 0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x4D, 0x69, 0x6E, 0x65, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x3B, 0x22, 0x2C, 0x22, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x3A, 0x74,
	0x72, 0x75, 0x65, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x74, 0x68,
	0x65, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66,
	0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x31, 0x34, 0x34, 0x31, 0x5F, 0x65, 0x22, 0x2C, 0x22, 0x73,
	0x69, 0x67, 0x22, 0x3A, 0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x6D, 0x75, 0x6C, 0x74, 0x69,
	0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x2F, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x43, 0x6C, 0x69, 0x65,
	0x6E, 0x74, 0x3B, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x69,
	0x6E, 0x67, 0x61, 0x6D, 0x65, 0x47, 0x55, 0x49, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A,
	0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x31, 0x34, 0x35, 0x36, 0x5F, 0x76, 0x22, 0x2C,
	0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x67, 0x75, 0x69,
	0x2F, 0x47, 0x75, 0x69, 0x49, 0x6E, 0x67, 0x61, 0x6D, 0x65, 0x3B, 0x22, 0x7D, 0x2C, 0x7B, 0x22,
	0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x4D, 0x6F, 0x75,
	0x73, 0x65, 0x4F, 0x76, 0x65, 0x72, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66,
	0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x31, 0x34, 0x37, 0x36, 0x5F, 0x78, 0x22, 0x2C, 0x22, 0x73,
	0x69, 0x67, 0x22, 0x3A, 0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x4D, 0x6F, 0x76, 0x69, 0x6E, 0x67, 0x4F,
	0x62, 0x6A, 0x65, 0x63, 0x74, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3B, 0x22, 0x7D,
	0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x7D, 0x2C,
	0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x63,
	0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x79, 0x2F, 0x45, 0x6E, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x50, 0x22, 0x3A, 0x7B, 0x22, 0x6E,
	0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x45, 0x6E, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6C, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x50, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x70, 0x6F, 0x73, 0x58, 0x22, 0x2C, 0x22,
	0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x30, 0x31, 0x36,
	0x35, 0x5F, 0x74, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x44, 0x22, 0x7D, 0x2C,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x70, 0x6F, 0x73, 0x59, 0x22, 0x2C, 0x22,
	0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x30, 0x31, 0x36,
	0x33, 0x5F, 0x75, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x44, 0x22, 0x7D, 0x2C,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x70, 0x6F, 0x73, 0x5A, 0x22, 0x2C, 0x22,
	0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x30, 0x31, 0x36,
	0x31, 0x5F, 0x76, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x44, 0x22, 0x7D, 0x2C,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x72, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x59, 0x61, 0x77, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65,
	0x6C, 0x64, 0x5F, 0x37, 0x30, 0x31, 0x37, 0x37, 0x5F, 0x7A, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67,
	0x22, 0x3A, 0x22, 0x46, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22,
	0x72, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x50, 0x69, 0x74, 0x63, 0x68, 0x22, 0x2C, 0x22,
	0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x30, 0x31, 0x32,
	0x35, 0x5F, 0x41, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x46, 0x22, 0x7D, 0x2C,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x69, 0x6E, 0x76, 0x65, 0x6E, 0x74, 0x6F,
	0x72, 0x79, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64,
	0x5F, 0x37, 0x31, 0x30, 0x37, 0x31, 0x5F, 0x62, 0x79, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22,
	0x3A, 0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x2F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x79, 0x2F, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x2F, 0x49,
	0x6E, 0x76, 0x65, 0x6E, 0x74, 0x6F, 0x72, 0x79, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x3B, 0x22,
	0x7D, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22,
	0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x48, 0x6F, 0x72, 0x69, 0x7A, 0x6F,
	0x6E, 0x74, 0x61, 0x6C, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66,
	0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31, 0x37, 0x34, 0x38, 0x31, 0x31, 0x5F, 0x61,
	0x4F, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x4C, 0x6E, 0x65, 0x74,
	0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F,
	0x45, 0x6E, 0x75, 0x6D, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x3B, 0x22, 0x7D, 0x2C, 0x7B, 0x22,
	0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4D, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75,
	0x6E, 0x63, 0x5F, 0x31, 0x34, 0x35, 0x37, 0x34, 0x37, 0x5F, 0x61, 0x22, 0x2C, 0x22, 0x73, 0x69,
	0x67, 0x22, 0x3A, 0x22, 0x28, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x49, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6F,
	0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74, 0x3B, 0x29, 0x56, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E,
	0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x73, 0x65, 0x6E, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4D, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75,
	0x6E, 0x63, 0x5F, 0x37, 0x31, 0x31, 0x36, 0x35, 0x5F, 0x64, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67,
	0x22, 0x3A, 0x22, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53,
	0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B, 0x29, 0x56, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D,
	0x65, 0x22, 0x3A, 0x22, 0x73, 0x65, 0x74, 0x52, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x22,
	0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x37, 0x30, 0x31,
	0x30, 0x31, 0x5F, 0x62, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x46, 0x46,
	0x29, 0x56, 0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x79, 0x2F, 0x70, 0x6C, 0x61,
	0x79, 0x65, 0x72, 0x2F, 0x49, 0x6E, 0x76, 0x65, 0x6E, 0x74, 0x6F, 0x72, 0x79, 0x50, 0x6C, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x49, 0x6E,
	0x76, 0x65, 0x6E, 0x74, 0x6F, 0x72, 0x79, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x22, 0x2C, 0x22,
	0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22,
	0x3A, 0x22, 0x6D, 0x61, 0x69, 0x6E, 0x49, 0x6E, 0x76, 0x65, 0x6E, 0x74, 0x6F, 0x72, 0x79, 0x22,
	0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x30,
	0x34, 0x36, 0x32, 0x5F, 0x61, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x5B, 0x4C,
	0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x69, 0x74,
	0x65, 0x6D, 0x2F, 0x49, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x3B, 0x22, 0x7D, 0x5D,
	0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x7D, 0x2C, 0x22,
	0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x69, 0x74,
	0x65, 0x6D, 0x2F, 0x49, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x22, 0x3A, 0x7B, 0x22,
	0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x49, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x61, 0x63, 0x6B,
	0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D,
	0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22,
	0x3A, 0x22, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65,
	0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x38, 0x32,
	0x38, 0x33, 0x33, 0x5F, 0x72, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29,
	0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72, 0x69, 0x6E,
	0x67, 0x3B, 0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x4D, 0x6F, 0x76, 0x69, 0x6E,
	0x67, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x22,
	0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x4D, 0x6F, 0x76, 0x69, 0x6E, 0x67,
	0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x22, 0x2C,
	0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74,
	0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22,
	0x67, 0x65, 0x74, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x50, 0x6F, 0x73, 0x22, 0x2C, 0x22, 0x6F, 0x62,
	0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31, 0x37, 0x38, 0x37, 0x38, 0x32, 0x5F,
	0x61, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x4C, 0x6E, 0x65, 0x74,
	0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F,
	0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x50, 0x6F, 0x73, 0x3B, 0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E,
	0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69,
	0x6C, 0x2F, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x50, 0x6F, 0x73, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61,
	0x6D, 0x65, 0x22, 0x3A, 0x22, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x50, 0x6F, 0x73, 0x22, 0x2C, 0x22,
	0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68,
	0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x3C,
	0x69, 0x6E, 0x69, 0x74, 0x3E, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x3C, 0x69,
	0x6E, 0x69, 0x74, 0x3E, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x44, 0x44,
	0x44, 0x29, 0x56, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x67,
	0x65, 0x74, 0x58, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63,
	0x5F, 0x31, 0x37, 0x37, 0x39, 0x35, 0x38, 0x5F, 0x6E, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22,
	0x3A, 0x22, 0x28, 0x29, 0x49, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A,
	0x22, 0x67, 0x65, 0x74, 0x59, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75,
	0x6E, 0x63, 0x5F, 0x31, 0x37, 0x37, 0x39, 0x35, 0x36, 0x5F, 0x6F, 0x22, 0x2C, 0x22, 0x73, 0x69,
	0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x49, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65,
	0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x5A, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22,
	0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31, 0x37, 0x37, 0x39, 0x35, 0x32, 0x5F, 0x70, 0x22, 0x2C, 0x22,
	0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x49, 0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E,
	0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69,
	0x6C, 0x2F, 0x45, 0x6E, 0x75, 0x6D, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x22, 0x3A, 0x7B, 0x22,
	0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x45, 0x6E, 0x75, 0x6D, 0x46, 0x61, 0x63, 0x69, 0x6E,
	0x67, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22,
	0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65,
	0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x49, 0x6E, 0x64, 0x65, 0x78, 0x22, 0x2C, 0x22, 0x6F, 0x62,
	0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31, 0x37, 0x36, 0x37, 0x34, 0x35, 0x5F,
	0x61, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x49, 0x22, 0x7D, 0x5D,
	0x7D, 0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E,
	0x65, 0x6E, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22,
	0x3A, 0x22, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D,
	0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61,
	0x6D, 0x65, 0x22, 0x3A, 0x22, 0x3C, 0x69, 0x6E, 0x69, 0x74, 0x3E, 0x22, 0x2C, 0x22, 0x6F, 0x62,
	0x66, 0x22, 0x3A, 0x22, 0x3C, 0x69, 0x6E, 0x69, 0x74, 0x3E, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67,
	0x22, 0x3A, 0x22, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53,
	0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B, 0x29, 0x56, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D,
	0x65, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x55, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66,
	0x75, 0x6E, 0x63, 0x5F, 0x31, 0x35, 0x30, 0x32, 0x36, 0x30, 0x5F, 0x63, 0x22, 0x2C, 0x22, 0x73,
	0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E,
	0x67, 0x2F, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B, 0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E,
	0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69,
	0x65, 0x6E, 0x74, 0x2F, 0x67, 0x75, 0x69, 0x2F, 0x47, 0x75, 0x69, 0x49, 0x6E, 0x67, 0x61, 0x6D,
	0x65, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x47, 0x75, 0x69, 0x49,
	0x6E, 0x67, 0x61, 0x6D, 0x65, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A,
	0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6E, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x55, 0x49, 0x22, 0x2C, 0x22, 0x6F, 0x62,
	0x66, 0x22, 0x3A, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x37, 0x33, 0x38, 0x34, 0x30, 0x5F,
	0x65, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D,
	0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F,
	0x67, 0x75, 0x69, 0x2F, 0x47, 0x75, 0x69, 0x4E, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x3B, 0x22,
	0x7D, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x7D,
	0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F,
	0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x67, 0x75, 0x69, 0x2F, 0x47, 0x75, 0x69, 0x4E, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x74, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22,
	0x47, 0x75, 0x69, 0x4E, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65,
	0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x63,
	0x68, 0x61, 0x74, 0x4C, 0x69, 0x6E, 0x65, 0x73, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A,
	0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x5F, 0x31, 0x34, 0x36, 0x32, 0x35, 0x32, 0x5F, 0x68, 0x22,
	0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x75, 0x74,
	0x69, 0x6C, 0x2F, 0x4C, 0x69, 0x73, 0x74, 0x3B, 0x22, 0x7D, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74,
	0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x7D, 0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D,
	0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F,
	0x67, 0x75, 0x69, 0x2F, 0x43, 0x68, 0x61, 0x74, 0x4C, 0x69, 0x6E, 0x65, 0x22, 0x3A, 0x7B, 0x22,
	0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x43, 0x68, 0x61, 0x74, 0x4C, 0x69, 0x6E, 0x65, 0x22,
	0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65,
	0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A,
	0x22, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E,
	0x74, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31,
	0x35, 0x31, 0x34, 0x36, 0x31, 0x5F, 0x61, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22,
	0x28, 0x29, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x49, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6F, 0x6D, 0x70, 0x6F,
	0x6E, 0x65, 0x6E, 0x74, 0x3B, 0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6A, 0x61, 0x76, 0x61, 0x2F,
	0x75, 0x74, 0x69, 0x6C, 0x2F, 0x4C, 0x69, 0x73, 0x74, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D,
	0x65, 0x22, 0x3A, 0x22, 0x4C, 0x69, 0x73, 0x74, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64,
	0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A,
	0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x22, 0x2C, 0x22,
	0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22,
	0x3A, 0x22, 0x28, 0x49, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F,
	0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B, 0x22, 0x7D, 0x2C, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65,
	0x22, 0x3A, 0x22, 0x73, 0x69, 0x7A, 0x65, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22,
	0x73, 0x69, 0x7A, 0x65, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x29, 0x49,
	0x22, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x2F, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2F, 0x6D, 0x75, 0x6C, 0x74, 0x69,
	0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x2F, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x43, 0x6C, 0x69, 0x65,
	0x6E, 0x74, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x57, 0x6F, 0x72,
	0x6C, 0x64, 0x43, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64,
	0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A,
	0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x42, 0x6C, 0x6F,
	0x63, 0x6B, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22,
	0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31, 0x38, 0x30, 0x34, 0x39, 0x35, 0x5F, 0x70, 0x22, 0x2C, 0x22,
	0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x75, 0x74, 0x69, 0x6C, 0x2F, 0x42, 0x6C, 0x6F, 0x63, 0x6B,
	0x50, 0x6F, 0x73, 0x3B, 0x29, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x2F, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x2F, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2F,
	0x49, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3B, 0x22, 0x7D, 0x5D, 0x7D,
	0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F,
	0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x2F, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x22, 0x3A, 0x7B, 0x22, 0x6E,
	0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x22, 0x2C, 0x22, 0x66, 0x69,
	0x65, 0x6C, 0x64, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64,
	0x73, 0x22, 0x3A, 0x5B, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x46, 0x72, 0x6F, 0x6D, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x22, 0x2C, 0x22, 0x6F, 0x62,
	0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31, 0x34, 0x39, 0x36, 0x38, 0x32, 0x5F,
	0x62, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22, 0x28, 0x4C, 0x6E, 0x65, 0x74, 0x2F,
	0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x2F,
	0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x3B, 0x29, 0x49, 0x22, 0x2C, 0x22, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x22, 0x3A, 0x74, 0x72, 0x75, 0x65, 0x7D, 0x5D, 0x7D, 0x2C, 0x22, 0x6E, 0x65, 0x74, 0x2F,
	0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2F, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x2F,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2F, 0x49, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x3A, 0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x49, 0x42, 0x6C, 0x6F,
	0x63, 0x6B, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2C, 0x22, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x73,
	0x22, 0x3A, 0x5B, 0x5D, 0x2C, 0x22, 0x6D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x73, 0x22, 0x3A, 0x5B,
	0x7B, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x67, 0x65, 0x74, 0x42, 0x6C, 0x6F, 0x63,
	0x6B, 0x22, 0x2C, 0x22, 0x6F, 0x62, 0x66, 0x22, 0x3A, 0x22, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x31,
	0x37, 0x37, 0x32, 0x33, 0x30, 0x5F, 0x63, 0x22, 0x2C, 0x22, 0x73, 0x69, 0x67, 0x22, 0x3A, 0x22,
	0x28, 0x29, 0x4C, 0x6E, 0x65, 0x74, 0x2F, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x2F, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x2F, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x3B, 0x22, 0x7D, 0x5D,
	0x7D, 0x7D
	};

	if (JNI_GetCreatedJavaVMs(&jvm, 1, nullptr) != 0)
		return GET_VM_FAILED;

	jvm->AttachCurrentThread((void**)&env, nullptr);
	if (env == nullptr)
		return GET_ENV_FAILED;

	mappings = nlohmann::json::parse(data);

	for (const auto& cls : mappings.items())
	{
		std::string cls_name = cls.value().at("name");
		class_map[cls_name] = get_class(cls.key());

		if (class_map[cls_name] == nullptr)
		{
			std::cerr << "[-] Failed to get class " + cls_name + "\n";
			return GET_CLASS_FAILED;
		}

		for (const auto& fld : cls.value().at("fields"))
		{
			std::string
				fld_name = fld.at("name"),
				fld_obf = fld.at("obf"),
				fld_sig = fld.at("sig");

			if(fld.contains("static") && fld.at("static") == true)
				field_map[cls_name][fld_name] = env->GetStaticFieldID(class_map[cls_name], fld_obf.c_str(), fld_sig.c_str());
			else 
				field_map[cls_name][fld_name] = env->GetFieldID(class_map[cls_name], fld_obf.c_str(), fld_sig.c_str());

			if (field_map[cls_name][fld_name] == nullptr)
				return GET_FIELD_FAILED;
		}

		for (const auto& mtd : cls.value().at("methods"))
		{
			std::string
				mtd_name = mtd.at("name"),
				mtd_obf = mtd.at("obf"),
				mtd_sig = mtd.at("sig");

			if (mtd.contains("static") && mtd.at("static") == true)
				method_map[cls_name][mtd_name] = env->GetStaticMethodID(class_map[cls_name], mtd_obf.c_str(), mtd_sig.c_str());
			else
				method_map[cls_name][mtd_name] = env->GetMethodID(class_map[cls_name], mtd_obf.c_str(), mtd_sig.c_str());

			if (method_map[cls_name][mtd_name] == nullptr)
				return GET_METHOD_FAILED;
		}
	}

	set_instance(
		"Minecraft",
		get_static_obj("Minecraft", "theMinecraft")
	);

	set_instance(
		"EntityPlayerSP",
		get_obj("Minecraft", "thePlayer")
	);

	set_instance(
		"WorldClient",
		get_obj("Minecraft", "theWorld")
	);

	set_instance(
		"InventoryPlayer",
		get_obj("EntityPlayerSP", "inventory")
	);

	set_instance(
		"GuiIngame",
		get_obj("Minecraft", "ingameGUI")
	);

	set_instance(
		"GuiNewChat",
		get_obj("GuiIngame", "persistantChatGUI")
	);

	set_instance(
		"MovingObjectPosition",
		get_obj("Minecraft", "objectMouseOver")
	);

	init = true;
	return OK;
}

void tpp::jni::debug_dump()
{
	for (const auto& i : jni::class_map)
	{
		std::cout << "[Class] " << i.first << " : " << i.second << '\n';
	}

	for (const auto& i : jni::field_map)
	{
		for (const auto& j : i.second)
		{
			std::cout << "[Field] " << i.first << " : " << j.first << ' ' << j.second << '\n';
		}
	}

	for (const auto& i : jni::method_map)
	{
		for (const auto& j : i.second)
		{
			std::cout << "[Method] " << i.first << " : " << j.first << ' ' << j.second << '\n';
		}
	}
}

void jni::set_instance(const std::string& cls, const jobject& obj)
{
	if (!class_map.contains(cls))
	{
		std::string exc = "[-] No such class as \"" + cls + "\" exists\n";
		throw std::exception(exc.c_str());
	}

	object_map[cls] = obj;
}

jobject jni::get_obj(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetObjectField(obj, field_map[cls][fld]);
}

jboolean jni::get_bool(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetBooleanField(obj, field_map[cls][fld]);
}

jbyte jni::get_byte(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetByteField(obj, field_map[cls][fld]);
}

jchar jni::get_char(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetCharField(obj, field_map[cls][fld]);
}

jshort jni::get_short(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetShortField(obj, field_map[cls][fld]);
}

jint jni::get_int(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetIntField(obj, field_map[cls][fld]);
}

jlong jni::get_long(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetLongField(obj, field_map[cls][fld]);
}

jfloat jni::get_float(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetFloatField(obj, field_map[cls][fld]);
}

jdouble jni::get_double(const jobject& obj, const std::string& cls, const std::string& fld)
{
	return env->GetDoubleField(obj, field_map[cls][fld]);
}

jobject jni::get_obj(const std::string& cls, const std::string& fld)
{
	return env->GetObjectField(object_map[cls], field_map[cls][fld]);
}

jboolean jni::get_bool(const std::string& cls, const std::string& fld)
{
	return env->GetBooleanField(object_map[cls], field_map[cls][fld]);
}

jbyte jni::get_byte(const std::string& cls, const std::string& fld)
{
	return env->GetByteField(object_map[cls], field_map[cls][fld]);
}

jchar jni::get_char(const std::string& cls, const std::string& fld)
{
	return env->GetCharField(object_map[cls], field_map[cls][fld]);
}

jshort jni::get_short(const std::string& cls, const std::string& fld)
{
	return env->GetShortField(object_map[cls], field_map[cls][fld]);
}

jint jni::get_int(const std::string& cls, const std::string& fld)
{
	return env->GetIntField(object_map[cls], field_map[cls][fld]);
}

jlong jni::get_long(const std::string& cls, const std::string& fld)
{
	return env->GetLongField(object_map[cls], field_map[cls][fld]);
}

jfloat jni::get_float(const std::string& cls, const std::string& fld)
{
	return env->GetFloatField(object_map[cls], field_map[cls][fld]);
}

jdouble jni::get_double(const std::string& cls, const std::string& fld)
{
	return env->GetDoubleField(object_map[cls], field_map[cls][fld]);
}

jobject jni::get_static_obj(const std::string& cls, const std::string& fld)
{
	return env->GetStaticObjectField(class_map[cls], field_map[cls][fld]);
}

jboolean jni::get_static_bool(const std::string& cls, const std::string& fld)
{
	return env->GetStaticBooleanField(class_map[cls], field_map[cls][fld]);
}

jbyte jni::get_static_byte(const std::string& cls, const std::string& fld)
{
	return env->GetStaticByteField(class_map[cls], field_map[cls][fld]);
}

jchar jni::get_static_char(const std::string& cls, const std::string& fld)
{
	return env->GetStaticCharField(class_map[cls], field_map[cls][fld]);
}

jshort jni::get_static_short(const std::string& cls, const std::string& fld)
{
	return env->GetStaticShortField(class_map[cls], field_map[cls][fld]);
}

jint jni::get_static_int(const std::string& cls, const std::string& fld)
{
	return env->GetStaticIntField(class_map[cls], field_map[cls][fld]);
}

jlong jni::get_static_long(const std::string& cls, const std::string& fld)
{
	return env->GetStaticLongField(class_map[cls], field_map[cls][fld]);
}

jfloat jni::get_static_float(const std::string& cls, const std::string& fld)
{
	return env->GetStaticFloatField(class_map[cls], field_map[cls][fld]);
}

jdouble jni::get_static_double(const std::string& cls, const std::string& fld)
{
	return env->GetStaticDoubleField(class_map[cls], field_map[cls][fld]);
}